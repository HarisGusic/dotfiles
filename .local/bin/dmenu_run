#!/usr/bin/env sh

run_script() { ~/.local/share/dmenu/"$1"; }

extract_aliases() {
    sed "s_.* \(.*\)='.*'.*_\1_" $@
}

get_desktop_apps() {
    sed -n -e '/^Exec=/p'                       \
        /usr/share/applications/*.desktop       \
        ~/.local/share/applications/*.desktop   |
        sed 's/Exec=\(\S*\).*/\1/'              |
    while read line; do
        basename $line
    done
}
get_aliases() {
    extract_aliases ~/.alias ~/.alias-tmp
}
get_gui_aliases() {
    extract_aliases ~/.alias-gui ~/.alias-gui-tmp
}

aliases="$(get_aliases)"
gui_aliases="$(get_gui_aliases)"

# ┏━━━━━━━━━━━━━━━┓
# ┃ dmenu entries ┃
# ┗━━━━━━━━━━━━━━━┛
get_commands() {
    echo "Windows"          # Choose windows
    echo "Config"           # Open documentation selection
    echo "Doc"              # Open documentation selection
    echo "Pacman"           # Package management
    echo "Color"            # Pick a color
    echo "Unicode"          # Pick an icon
    echo "Fix Wifi"         # Fix Wi-Fi drop issue on some networks
    echo "Kill Process"     # Kill process
    echo "$aliases"
    echo "$gui_aliases"
    get_desktop_apps        # Programs extracted from *.desktop files
}

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Actions based on user's choice ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
execute() {
    case "$1" in
        # Commands that we have defined for dmenu exclusively
        "Windows")
            ~/.local/share/i3/i3-container-commander.py ;;
        "Doc")
            run_script doc ;;
        "Pacman")
            run_script pkg ;;
        "Color")
            run_script color ;;
        "Unicode")
            run_script unicode.py ;;
        "Kill Process")
            run_script pkill ;;
        "Fix Wifi")
            rfkill block wifi && rfkill unblock wifi ;;
        "Config")
            run_script cf.py ;;
        # The rest: aliases and regular commands
        *)
            # If the command is a GUI program, just run it
            for al in $gui_aliases; do
                if [ "$1" = "$al" ]; then
                    fish -c "$@"    # Only fish works here
                    exit
                fi
            done
            # If the command is a CLI program, open it in fish
            for al in $aliases; do
                if [ "$1" = "$al" ]; then
                    cmd="$@"    # Why I have to create this variable puzzles me
                    alacritty --class FishCmd,Alacritty -e fish -C "$cmd"
                    exit
                fi
            done
            echo $1 | sh
            ;;
    esac
}

execute "$(get_commands | dmenu $@)"
exit
